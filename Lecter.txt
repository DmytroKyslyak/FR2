Лекция№1
ООП
Объект характерезуется (свойствами и действиями)
имя.команда()
вася.купи(хлеб)

Лекция№2
Ассоциативные массивы JSON / объекты
Сущность - существует (нечто)
объект - свойство + действие на ними
функция - действие
stackoverflow.com - подсказки с примерами
Комментарии
Зачем? Что тут написано? Как оно работает?
д/з придумать ас массив - оператор моб (код)+функция-глагол

Лекция№3
д/з прокомментировать цикл;
-побаловться с цифрами operators (мат операции);
-break point - побаловаться, watch;
-посадка самолета, номер рейса, приглашение на посадку (как хелоу джек);
- как сити - создать кулинарию, сравнение отрицание, и, или (использовать +);
-тернарный оператор и вычисление результатов ?: 2 критерия - результат;
-по обджектам сделать сделать свой пример

Лекция№4
this всегда
|| значение по умолчанию
функция (метод) 
MVC - модель, данные / вид, представление / контроллер, логика
класс - это шаблон, матрица, клише (пресс-форма) 
!!описывает свойства и действия
объект - воплощение предмета, процесс (изделие) 
!!хранит значения свойств и выполняет разные комбинации действий
null - значение неизвестно
д/з в своем классе сделать конструктор как джек + пареметр по умолчанию, ненужные последние
создать несколько объектов как френд2
метод greet вывести чтото
массив повторить как в классе, поиграться.

Лекция№5
... spread развернуть (или лучше rest)
Math: объект статический (класс)
Math.max.apply(Math , - аналог spread
д/з
массивы - создать пару массивов
Маth - создать пару примеров

Лекция№6
myString.match - сравнение, соответствия, 
/......../ рег выражения, \-экранирование
/M[a-z]+/gi - что хотим найти, диапазон, + множитель от 1 до бесконечности, gi-global, insensetive case 
myString.replace('M', 'T') - меняет в 1 месте, при первом обнаружении
Поиск по скорости:
indexOf
search
match
split - разделить по - результат в массив
{} - 
if выбирает между действиями
==?: тернарный выбирает из значений
д/з
- сделать все тоже самое
- строка, перечислены номера рейсов в формате 
AD-12....ABC-1234 (строка, предложение) от 2-3 от 2-4
поизвлекать номера рейсов

Лекция№7
let d=newDate([Y,M,D,h,m,s,ms])
d.getTime()
d.getFullYear() //d.getYear() - не очень
d.getMonth() +1
d.getDate()
d.getDay()
d.getHours()
d.set____()
d.setTime(timestamp)
д/з
Создать 2 обекта даты (дата+время) - 2 переменные текущее и + 2 недели
1 - текущее - сейчас (создали и не идет)
2 - обозначать время в будующем - 2 недели вперед
/// Управляющие конструкции =========
	//	()-обстоятельство/условия {}-блок команд
		if
		else if
		else
		== - сравнение
		do while - всегда отрабатывает как минимум 1 раз (цикл с постусловием)
		while - зависит от условия (цикл с предусловием)
function hello(sMyParameter) 
{
//... - тело функции (должен быть код)
return myResult (возврат результата функции)
}

Функция как черный ящик
			   ___
вх. данные--> | F | --> результат работы функции
			   ---
			  x=sin(45);
			<-----<-----<
			поток данных
мясо -> мясорубка -> фарш

указатель на функцию (ссылка) сигнализация у машины.
переменная doltWell(myVar)
обект doltWell({...})
функция doltWell(function(){})
ссылка на функцию doltWell(woker.vacation)

Лекция№8
функция как входной параметр
1. Воздействие на кнопку
2. Браузер обнаружил событие
3. запускает JS функцию

функции:
1. собственные описание + вызов
2. встроеные вызов alert()

Функция без возврата - результат console.log (вывод на экран или измениня в других обектах)
Побочный эффект работы функции:
1. вывод данных на экран
2. измениние внешних объектов
Основной эффект работы функции: return
return - дырки мясорубки , переменная - фарш, let переменная - тарелка с фаршем
	
	ПОТОК ДАННЫХ 5 шагов как запускается функция
!1-передать параметры
!2-принять параметры
!3-выполнить тело
!4-вернуть результат 
!5-присвоить результат
	ООП Функция = метод
Функция без имени - анонимная function(){} - использовать в одном месте
	ЗАМЫКАНИЯ
функция сама себя запускает ()();

д/з ООП аналог
написать class
породить объект
запустить функцию

Лекция№9
	РЕКУРСИЯ = вложенность
обращение (вызов) функции к самой себе (рекурсивный вызов - повторный вызов)
function myFunc(x){myFunc(x);}

д/з факториал
рекурсия
1. цикл 
2. typeOf - определить что число
3. отличать массив от числа через .constructor.name - определить что это
4. встретили массив, делаем рекурсию по отношению к этому массиву.
5. должен быть - return
6. конец рекурсии не описывается - конец это конец цикла.
Задача суммировать числа больше 4 во внутреннюю переменную.

Задача 2 - переписать про меню.

======================JQuery====================== библиотека не фреймворк
Данные HTML / Логика Что сделать? / События то, что пользователь делает на странице КОГДА?
Порядок работы с объектом
1. Создать новый объект new
2. Сообщить инфу об HTML элементе
3. Принять инфу. об HTML элементе (и ссылки на другие дочерние элементы, внутри главного(.find()). Ссылка это jq обект $)
4. Сохранить в объекте ссылку на HTML элемент
5. Описать события, которые инициирует пользователь
6. Описать действия, как реагировать на события

Лекция№9
дз - все сделать сами, что в классе

Лекция№10
$ find i возвращает JQ обект
JQ обект является выборкой JS... Они представлены JS обектами. Такой JQ обект называется - коллекцией. 
д/з 
1. сделать с нуля анимацию
2. form1 js - как в классе

Лекция№11
MVC - 
M - модель (данные) 
C - controller обработка данных (логика)
V - view html (вид) 

ОБЪЕКТ = свойства + методы
свойства и есть модель (данные)
методы это контроллер (логика)

Лекция№12
Сигнатура функции label(sSelector)
$() - ищет глобально
$-функция выполняет глобальный поиск в пределах всего html документа по css селектору (или js обекту) и возвращаем - jq объект который является коллекцией.
д/з 
label val - написать все сами

Лекция№14
Лекция№15
на примере form1 - последовательность.
шаг 0 - html код, с которым мы работаем <form> id='form1'
шаг 1 - создание нового объекта f1 = new b_form('#form1')
	f1 - надо чтобы доступиться к памяти и поковырять через consol
шаг 2 - указываем с каким html мы работаем ('#form1')
шаг 3 - принять инфу. об HTML элементе. передаем инфу в sSelector, которая является параметром (роль) в конструкторе класса. Что принимаем, Консоль, строка 3 , sSelector = #form1. в черный ящик (функция конструктор) На выходе, объект класса constructor, после розового шага5 ТУПИК на f1(ожидание)

шаг 4 - this.form = $(sSelector); вызов функции, черный ящик (функция jq - $) на входе sSelector, на выходе JQ объект с именем (this.form)

шаг 5 - описание событий. каждый раз одно и тоже . createEvents()
this.form.find('.b-form__ok-button').click(this.showInfo.bind(this));
схема описания действия. 

6 шаг запуск действия происходит после воздействия пользователя на интерфейс.т.е. не является частью последовательности 1-5. 

дз - все нарисовать
Лекция№16
дз - приватные свойства
вспомнить код
Лекция№17
составить словарь
методы доступа к хтмл (child),показ , сокрытие, считывание, запись,
все строковые методы и т.д. индекс eq

сделать галерею.
Лекция№18
сигнатура
д/з галерея, после шага вернуться в диапазон с обратной стороны
Лекция№19
Регулярные выражения
/d{3}(-/d{2}){2}
/
Лекция№20
/[А-ЯЁ][а-яё]{2,15} /gmi i- не чувствителен к регистру
сокращение множителей
/^[А-ЯЁ][а-яё]{1,14}(-[А-ЯЁ][а-яё]{1,14})?$ - фамилии одинарные или двойные с 1 тире
[а-щьюяєії'] - укр буквы
Альтернатива
или-или - один вариант из перечисленных (|||)
10-19
1 [0-9]
(0[1-9]|1[0-2]) - 12 месяцев 01-12
Отрицание набора
[^...] - циркумфлекс
<[^<>]+> - выбрать все теги, не включает < и >
Спецсимволы
\- позволить ставить -
[-а-я][а-я-]
[а-я!-*] - понимает как диапазон от ! до *
[а-я*-!] - не работает, диапазон наоборот
надо сделать [а-я*\-!]
\\ - дробь
\( - все спецсимволы экраинируются
\. сама точка экранируется
/\. выделить точку
/. любой символ

username [a-z0-9\.\-_]{1,255}
Лекция№21
Форматы записей:
1. let regexp = new Regexp(sRegRep, sFlags);
 рег выражение    ^...$
2. let regexp = /^...$/i;
Лекция№22

Лекция№23Типы данных и имена классов
temp1.constructor.name - html
$(temp1).constructor.name - JQuery
д/з
0. повторить
1. за курсором мыши правее и ниже его, бегал смайлик
2. text.keydown при нажатии комбинации клавиш $(document).keydown()
на комбинации ctrl f2 - реакция: выводим location.href=''......адрес - ссылка на уровне js
Лекция№24
Лекция№25
Лекция№26
Ошибки с анэкспектед (unexpected) - то что написали, там где написали не ожидал видеть там



